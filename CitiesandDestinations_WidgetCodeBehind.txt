using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Ektron.Cms.Framework.Content;
using Ektron.Cms.Widget;
using Ektron.Cms;
using Ektron.Cms.API;
using Ektron.Cms.Common;
using Ektron.Cms.Controls.CmsWebService;
using Ektron.Cms.PageBuilder;
using NewDevTraining;

/// <summary>
/// This widget was created by copying the ContentBlock widget then modifying
/// to create a version that displays data from a specific Smartform.
/// </summary>
public partial class widgets_CitiesandDestinations : System.Web.UI.UserControl, IWidget
{
    /// <summary>
    /// Define widget properties - this is from the original ContentBlock widget.
    /// The ContentBlockId property holds the ID of the selected content item.
    /// The [WidgetDataMember] declaration states that this property will be
    /// automatically saved and loaded by the CMS when editing a Page.
    /// </summary>
    private long _contentBlockId;
    [WidgetDataMember(0)]
    public long ContentBlockId { get { return _contentBlockId; } set { _contentBlockId = value; } }

    [WidgetDataMember(0)]
    public int FilterDropDownIndex { get; set; }

    Ektron.Cms.PageBuilder.WidgetHost _widgetHost;
    IWidgetHost _host;

    protected ContentAPI m_refContentApi = new ContentAPI();
    protected EkMessageHelper m_refMsg;

    protected CommonApi _api;
    protected string appPath;
    protected int langType;
    protected string uniqueId;

    protected void Page_Init(object sender, EventArgs e)
    {
        m_refMsg = m_refContentApi.EkMsgRef;
        CancelButton.Text = m_refMsg.GetMessage("btn cancel");
        SaveButton.Text = m_refMsg.GetMessage("btn save");
        NewButton.Text = m_refMsg.GetMessage("btn new");
        NewFormButton.Text = m_refMsg.GetMessage("btn new");
        _host = Ektron.Cms.Widget.WidgetHost.GetHost(this);
        _host.Title = "Cities and Destinations";
        _host.Edit += new EditDelegate(EditEvent);
        _host.Maximize += new MaximizeDelegate(delegate() { Visible = true; });
        _host.Minimize += new MinimizeDelegate(delegate() { Visible = false; });
        _host.Create += new CreateDelegate(delegate() { EditEvent(""); });
        _host.ExpandOptions = Expandable.ExpandOnEdit;

        this.EnableViewState = false;

        Page.ClientScript.GetPostBackEventReference(SaveButton, "");
        _api = new Ektron.Cms.CommonApi();
        appPath = _api.AppPath;
        langType = _api.RequestInformationRef.ContentLanguage;
        MainView();
        ViewSet.SetActiveView(View);

        BindCBTypeFilter();
    }
    protected void BindCBTypeFilter()
    {
        CBTypeFilter.Items.Add(new ListItem(m_refMsg.GetMessage("lbl content"), "content"));
        CBTypeFilter.Items.Add(new ListItem(m_refMsg.GetMessage("lbl forms"), "forms"));
        CBTypeFilter.Items.Add(new ListItem(m_refMsg.GetMessage("lbl multimedia"), "assets"));
    }


    /// <summary>
    /// This method has been modified from the original ContentBlock widget
    /// so that we can show the Cities & Destinations Smartform content.
    /// </summary>
    protected void MainView()
    {
        // Only do this if we have selected an ID.
        if (ContentBlockId > 0)
        {
            // Declare the ContentManager - this is our API specifically for this Smartform type
            ContentTypeManager<CitiesAndDestinations> contentManager = new ContentTypeManager<CitiesAndDestinations>();

            // Get the Smartform content item
            ContentType<CitiesAndDestinations> citiesDestinationsItemBlock = contentManager.GetItem(ContentBlockId, false);

            // First make sure it is not null then bind the values to the ListView control
            if (citiesDestinationsItemBlock != null)
            {
                // The CitiesAndDestinations Smartform contains a property that has multiple rootCity objects.
                // Each rootCity represents a single locations so we are in effect binding multiple items
                // to our ListView control.
                lstCitiesDestinations.DataSource = citiesDestinationsItemBlock.SmartForm.City;
                lstCitiesDestinations.DataBind();
            }
        }
    }

    /// <summary>
    /// This event is taken "as is" from the Ektron ContentBlock control
    /// </summary>
    /// <param name="settings"></param>
    void EditEvent(string settings)
    {
        try
        {
            //tabTesting.Visible = _ShowTestingTab;

            string webserviceURL = _api.SitePath + "widgets/contentblock/CBHandler.ashx";
            // Register JS
            JS.RegisterJSInclude(this, JS.ManagedScript.EktronJS);
            Ektron.Cms.API.JS.RegisterJSInclude(this, Ektron.Cms.API.JS.ManagedScript.EktronClueTipJS);
            JS.RegisterJSInclude(this, JS.ManagedScript.EktronScrollToJS);
            JS.RegisterJSInclude(this, _api.SitePath + "widgets/contentblock/behavior.js", "ContentBlockWidgetBehaviorJS");

            // Insert CSS Links
            Css.RegisterCss(this, _api.SitePath + "widgets/contentblock/CBStyle.css", "CBWidgetCSS"); //cbstyle will include the other req'd stylesheets
            Ektron.Cms.Framework.UI.Packages.jQuery.jQueryUI.ThemeRoller.Register(this); //cbstyle will include the other req'd stylesheets

            JS.RegisterJSBlock(this, "Ektron.PFWidgets.ContentBlock.webserviceURL = \"" + webserviceURL + "\"; Ektron.PFWidgets.ContentBlock.setupAll('" + ClientID + "');", "EktronPFWidgetsCBInit");

            //IsGoogleMultivariate = cbMultiVariate.Checked;
            //GoogleSectionName = tbSectionName.Text;

            ViewSet.SetActiveView(Edit);

            if (ContentBlockId > 0)
            {
                tbData.Text = ContentBlockId.ToString();
                ContentAPI capi = new ContentAPI();
                long folderid = capi.GetFolderIdForContentId(ContentBlockId);
                tbFolderPath.Text = folderid.ToString();
                while (folderid != 0)
                {
                    folderid = capi.GetParentIdByFolderId(folderid);
                    if (folderid > 0) tbFolderPath.Text += "," + folderid.ToString();
                }
            }

            if (0 <= FilterDropDownIndex && FilterDropDownIndex < CBTypeFilter.Items.Count)
            {
                CBTypeFilter.SelectedIndex = FilterDropDownIndex;
            }

        }
        catch (Exception e)
        {
            errorLb.Text = e.Message + e.Data + e.StackTrace + e.Source + e.ToString();
            _host.Title = _host.Title + " error";
            ViewSet.SetActiveView(View);
        }
    }


    /// <summary>
    /// This event is fired when saving the widget from edit mode.
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    protected void SaveButton_Click(object sender, EventArgs e)
    {
        Int64 cid = 0;
        if (Int64.TryParse(tbData.Text, out cid))
        {
            //IsGoogleMultivariate = cbMultiVariate.Checked;
            //GoogleSectionName = tbSectionName.Text;
            ContentBlockId = cid;

            ObjectData objectData = new ObjectData();
            objectData.ObjectId = cid;
            objectData.ObjectLanguage = m_refContentApi.ContentLanguage;
            objectData.ObjectType = EkEnumeration.CMSObjectTypes.Content;

            FilterDropDownIndex = CBTypeFilter.SelectedIndex;

            if ((Page as PageBuilder) != null)
            {
                _widgetHost = _host as Ektron.Cms.PageBuilder.WidgetHost;
                _widgetHost.PBWidgetInfo.Associations.Clear();
                _widgetHost.PBWidgetInfo.Associations.Add(objectData);
                _widgetHost.SaveWidgetDataMembers();
            }
            else
            {
                _host.SaveWidgetDataMembers();
            }

            MainView();
        }
        else
        {
            tbData.Text = "";
            editError.Text = m_refMsg.GetMessage("lbl invalid content block id");

        }
        ViewSet.SetActiveView(View);
    }

    /// <summary>
    /// This event is taken "as is" from the ContentBlock widget
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    protected void CancelButton_Click(object sender, EventArgs e)
    {
        MainView();
        ViewSet.SetActiveView(View);
    }

}